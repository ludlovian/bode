{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["'use strict'\n\nexport default class Promise {\n  constructor (resolver) {\n    if (typeof resolver !== 'function') {\n      throw new TypeError('bad resolver')\n    }\n    let value\n    let status = -1 // pending\n    let callbacks = []\n    const self = {}\n\n    const makeCallbacks = () => {\n      callbacks.map(callback => callback[status](value))\n      callbacks = []\n    }\n\n    const rejectThis = r => {\n      value = r\n      status = 1 // rejected - also index into callback tuple\n      makeCallbacks()\n    }\n\n    const resolveThis = v => {\n      if (v === self) {\n        return rejectThis(new TypeError('self-resolve'))\n      }\n      if (v && (typeof v === 'function' || typeof v === 'object')) {\n        let then\n        try {\n          then = v.then\n        } catch (err) {\n          return rejectThis(err)\n        }\n        if (typeof then === 'function') {\n          return runResolver(then.bind(v), resolveThis, rejectThis)\n        }\n      }\n      value = v\n      status = 0 // resolved - index into callback tuple\n      makeCallbacks()\n    }\n\n    self.then = (onFulfilled, onRejected) =>\n      new Promise((resolve, reject) => {\n        callbacks.push([\n          handler(onFulfilled, resolve, reject) || resolve,\n          handler(onRejected, resolve, reject) || reject\n        ])\n        if (status >= 0) makeCallbacks()\n      })\n    runResolver(resolver, resolveThis, rejectThis)\n    return self\n  }\n}\n\nfunction runResolver (resolver, resolve, reject) {\n  let n = 0\n  const once = fn => v => {\n    if (n++ === 0) fn(v)\n  }\n  try {\n    resolver(once(resolve), once(reject))\n  } catch (err) {\n    once(reject)(err)\n  }\n}\n\nfunction handler (fn, resolve, reject) {\n  if (typeof fn !== 'function') return\n  return v =>\n    asap(() => {\n      try {\n        resolve(fn(v))\n      } catch (err) {\n        reject(err)\n      }\n    })\n}\n\nconst asap = ((q = []) => fn => {\n  q.push(fn) === 1 &&\n    (setImmediate || setTimeout)(() => {\n      for (let f = q.shift(); f; f = q.shift()) f()\n    })\n})()\n"],"names":["Promise","constructor","resolver","TypeError","value","status","callbacks","self","makeCallbacks","map","callback","rejectThis","r","resolveThis","v","then","err","runResolver","bind","onFulfilled","onRejected","resolve","reject","push","handler","n","once","fn","asap","const","q","setImmediate","setTimeout","let","f","shift"],"mappings":"AAEe,IAAMA,QACnBC,WAAaC,MACa,mBAAbA,QACH,IAAIC,UAAU,oBAElBC,EACAC,GAAU,EACVC,EAAY,GACVC,EAAO,GAEPC,aACJF,EAAUG,aAAIC,UAAYA,EAASL,GAAQD,OAC/B,IAGRO,WAAaC,KACTA,IACC,OAILC,WAAcC,MACdA,IAAMP,SACDI,EAAW,IAAIR,UAAU,oBAE9BW,IAAmB,mBAANA,GAAiC,iBAANA,GAAiB,KACvDC,MAEFA,EAAOD,EAAEC,KACT,MAAOC,UACAL,EAAWK,MAEA,mBAATD,SACFE,YAAYF,EAAKG,KAAKJ,GAAID,EAAaF,KAG1CG,IACC,cAIXP,EAAKQ,cAAQI,EAAaC,UACxB,IAAIpB,WAASqB,EAASC,GACpBhB,EAAUiB,KAAK,CACbC,QAAQL,EAAaE,EAASC,IAAWD,EACzCG,QAAQJ,EAAYC,EAASC,IAAWA,IAEtCjB,GAAU,GAAGG,mBAETN,EAAUW,EAAaF,GAC5BJ,GAIX,SAASU,YAAaf,EAAUmB,EAASC,OACnCG,EAAI,EACFC,WAAOC,mBAAMb,GACL,GAARW,KAAWE,EAAGb,SAGlBZ,EAASwB,EAAKL,GAAUK,EAAKJ,IAC7B,MAAON,GACPU,EAAKJ,EAALI,CAAaV,IAIjB,SAASQ,QAASG,EAAIN,EAASC,MACX,mBAAPK,kBACJb,UACLc,oBAEIP,EAAQM,EAAGb,IACX,MAAOE,GACPM,EAAON,OAKfa,IAAMD,KAAO,SAAEE,yBAAI,aAAOH,GACT,IAAfG,EAAEP,KAAKI,KACJI,cAAgBC,2BACVC,IAAIC,EAAIJ,EAAEK,QAASD,EAAGA,EAAIJ,EAAEK,QAASD,OAHnC"}